# input characters are represented as ES3 characters, which can be any unicode character
SourceCharacter = char,

Whitespace = uc('SP') || uc('TAB') || uc('VT') || uc('FF') || uc('NBSP') || uc('BOM') || uc('Zs'),
LineTerminator = uc('LF') || uc('CR') || uc('LS') || uc('PS'),
LineTerminatorSequence = uc('LF') || ~uc('LF') uc('CR') || uc('LS') || uc('PS') || uc('CR') uc('LF'),

Comment = MultiLineComment || SingleLineComment,

# <...> is OMeta's "consumed-by" operator: the value of <...> is the input it consumed
MultiLineComment = seq("/*") <(MultiLineCommentChars | empty)>:cs seq("*/") -> cs,
MultiLineCommentChars = MultiLineNotAsteriskChar (MultiLineCommentChars | empty)
                       || '*' (PostAsteriskCommentChars | &seq("*/")),
PostAsteriskCommentChars = MultiLineNotForwardSlashOrAsteriskChar (MultiLineCommentChars | empty)
                          || '*' (PostAsteriskCommentChars | &seq("*/")),
MultiLineNotAsteriskChar = ~('*') SourceCharacter,
MultiLineNotForwardSlashOrAsteriskChar = ~('/' || '*') SourceCharacter,
SingleLineComment = seq("//") <(SingleLineCommentChars | empty)>,
SingleLineCommentChars = SingleLineCommentChar (SingleLineCommentChars | empty),
SingleLineCommentChar = ~LineTerminator SourceCharacter,


Identifier = IdentifierName:n ~checkReservedWord(n) -> (n),
IdentifierName = <IdentifierName IdentifierPart>
                 | IdentifierStart,

IdentifierStart = UnicodeLetter || '$' || '_' || '\\' UnicodeEscapeSequence,
IdentifierPart = IdentifierStart | UnicodeCombiningMark
                 | UnicodeDigit | UnicodeConnectorPunctuation
                 | uc('ZWNJ') | uc('ZWJ'),
UnicodeLetter = uc('L') || uc('Nl'),
UnicodeCombiningMark = uc('Mn') || uc('Mc'),
UnicodeDigit = uc('Nd'),
UnicodeConnectorPunctuation = uc('Pc'),



# seq empty char cs uc